/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package baykus;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.Statement;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import net.sourceforge.tess4j.Tesseract;
import net.sourceforge.tess4j.TesseractException;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Size;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;

/**
 *
 * @author K4RK1N
 */
public class FisArayuz extends javax.swing.JFrame {

    DefaultTableModel model;

    Fisİslemleri islemler = new Fisİslemleri();
    FisOkuma cba=new FisOkuma();
    JLabel label;
    private String sorgu_ek;
    public static String path = "";

    /**
     * Creates new form FisArayuzz
     */
    public FisArayuz() {
        initComponents();

        model = (DefaultTableModel) fis_tablosu.getModel();

        label = new JLabel();
        label.setBounds(10, 10, 350, 350);
        add(label);

        fisGoruntule();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        fis_tablosu = new javax.swing.JTable();
        isletmeadi_arama = new javax.swing.JTextField();
        tarih_arama = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        isletmeadi_buton = new javax.swing.JButton();
        tarih_buton = new javax.swing.JButton();
        fissec_button = new javax.swing.JButton();
        guncel_tablo = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        fis_parse = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fis_tablosu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fiş No", "İşletme Adı", "Fiş Tarihi", "Ürünler", "Ürün Fiyatları", "Ürünler KDV", "Toplam Fiyat", "Toplam KDV"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(fis_tablosu);

        isletmeadi_arama.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isletmeadi_aramaActionPerformed(evt);
            }
        });

        tarih_arama.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tarih_aramaActionPerformed(evt);
            }
        });

        jLabel1.setText("İŞLETME ADI");

        jLabel2.setText("FİŞ TARİHİ");

        isletmeadi_buton.setText("ARA");
        isletmeadi_buton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isletmeadi_butonActionPerformed(evt);
            }
        });

        tarih_buton.setText("ARA");
        tarih_buton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tarih_butonActionPerformed(evt);
            }
        });

        fissec_button.setText("FİŞ SEÇ");
        fissec_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fissec_buttonActionPerformed(evt);
            }
        });

        guncel_tablo.setText("LİSTELE");
        guncel_tablo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guncel_tabloActionPerformed(evt);
            }
        });

        fis_parse.setColumns(20);
        fis_parse.setRows(5);
        jScrollPane3.setViewportView(fis_parse);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(430, 430, 430)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(guncel_tablo, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(fissec_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(isletmeadi_arama, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(40, 40, 40))
                                .addComponent(tarih_arama, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(isletmeadi_buton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2))
                                    .addGap(41, 41, 41)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(tarih_buton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(30, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1019, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(86, 86, 86)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(isletmeadi_arama, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(isletmeadi_buton)
                                .addGap(112, 112, 112)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tarih_arama, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(fissec_button)
                                .addGap(101, 101, 101)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                                .addComponent(guncel_tablo)
                                .addGap(51, 51, 51))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tarih_buton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void isletmeadi_aramaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isletmeadi_aramaActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_isletmeadi_aramaActionPerformed

    private void isletmeadi_butonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isletmeadi_butonActionPerformed
        // TODO add your handling code here:
        ArrayList<FisOzellik> fisOzellikleri = new ArrayList<FisOzellik>();

        sorgu_ek = isletmeadi_arama.getText();
        islemler.fis_isletmead_arama(sorgu_ek);

        fisOzellikleri = islemler.fis_isletmead_arama(sorgu_ek);

        if (fisOzellikleri != null) {
            model.setRowCount(0);
            for (FisOzellik fisOzellik : fisOzellikleri) {

                Object[] eklenecek = {fisOzellik.getFis_no(), fisOzellik.getFis_isletme(), fisOzellik.getFis_tarih(), fisOzellik.getFis_urun(), fisOzellik.getFis_urun_fiyat(), fisOzellik.getFis_urun_kdv(), fisOzellik.getFis_toplam_fiyat(), fisOzellik.getFis_toplam_kdv()};

                model.addRow(eklenecek);

            }

        }
    }//GEN-LAST:event_isletmeadi_butonActionPerformed

    private void tarih_butonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tarih_butonActionPerformed
        // TODO add your handling code here:
        ArrayList<FisOzellik> fisOzellikleri = new ArrayList<FisOzellik>();

        sorgu_ek = tarih_arama.getText();
        islemler.fis_tarih_arama(sorgu_ek);

        fisOzellikleri = islemler.fis_tarih_arama(sorgu_ek);

        if (fisOzellikleri != null) {
            model.setRowCount(0);
            for (FisOzellik fisOzellik : fisOzellikleri) {

                Object[] eklenecek = {fisOzellik.getFis_no(), fisOzellik.getFis_isletme(), fisOzellik.getFis_tarih(), fisOzellik.getFis_urun(), fisOzellik.getFis_urun_fiyat(), fisOzellik.getFis_urun_kdv(), fisOzellik.getFis_toplam_fiyat(), fisOzellik.getFis_toplam_kdv()};

                model.addRow(eklenecek);

            }

        }


    }//GEN-LAST:event_tarih_butonActionPerformed

    private void tarih_aramaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tarih_aramaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tarih_aramaActionPerformed

    private void fissec_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fissec_buttonActionPerformed
        // TODO add your handling code here:

        JFileChooser file = new JFileChooser();
        file.setCurrentDirectory(new File(System.getProperty("user.home")));
        //filter the files
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.Images", "jpg", "gif", "png");
        file.addChoosableFileFilter(filter);
        int result = file.showSaveDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = file.getSelectedFile();
            path = selectedFile.getAbsolutePath();
            label.setLocation(30,25);
            label.setSize(375, 450);
            label.setIcon(ResizeImage(path));
            adres_yolla_before(path);
        } else if (result == JFileChooser.CANCEL_OPTION) {
            System.out.println("No File Select");
        }
        String fulltext="";
        
       System.loadLibrary(Core.NATIVE_LIBRARY_NAME);

        String SRC_PATH2 = "C:\\Users\\K4RK1N\\Pictures\\fis\\edits\\";

        //fiş editleme aşamaları
        Mat img = new Mat();
        img = Imgcodecs.imread(path);
        Imgcodecs.imwrite(SRC_PATH2 + "1.png", img);

        Mat imgGray = new Mat();
        Imgproc.cvtColor(img, imgGray, Imgproc.COLOR_BGR2GRAY);
        Imgcodecs.imwrite(SRC_PATH2 + "2.png", imgGray);

        Mat imgGaussianBlur = new Mat();
        Imgproc.GaussianBlur(imgGray, imgGaussianBlur, new Size(3, 3), 0);
        Imgcodecs.imwrite(SRC_PATH2 + "3.png", imgGaussianBlur);

        Mat imgAdaptiveThreshold = new Mat();
        Imgproc.adaptiveThreshold(imgGaussianBlur, imgAdaptiveThreshold, 1000, Imgproc.ADAPTIVE_THRESH_MEAN_C, Imgproc.THRESH_BINARY, 71, 38);
        Imgcodecs.imwrite(SRC_PATH2 + "4.png", imgAdaptiveThreshold);

        Tesseract tesseract = new Tesseract();

        tesseract.setDatapath("C:\\Program Files\\Tesseract\\tessdata");
        tesseract.setLanguage("tur+eng");

        try {
            fulltext = tesseract.doOCR(new File(SRC_PATH2 + "4.png"));
        } catch (TesseractException ex) {
            Logger.getLogger(FisArayuz.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        fis_parse.setText(fulltext);
        String PATH_isletmeadi = "C:\\Users\\K4RK1N\\Pictures\\fis\\texts\\isletmeadi.txt";
        FileReader isletmeadi_fr;
        BufferedReader isletmeadi_br;
        String isletme_adi = "";
        String isletme_adi_1 = "";
        try {
            isletmeadi_fr = new FileReader(PATH_isletmeadi);
            isletmeadi_br = new BufferedReader(isletmeadi_fr);
            String isletmeadi_str;
        

        try {
            while ((isletmeadi_str = isletmeadi_br.readLine()) != null) {
                
                String[] isletmeadi_result = fulltext.split(isletmeadi_str);
                String isletmeadi_before = isletmeadi_result[0];
                String[] isletmeadi_result_1 = isletmeadi_before.split("\\n");
                isletme_adi = isletmeadi_result_1[isletmeadi_result_1.length - 1];
                String[] control = fulltext.split("\\n");
                
                if (!isletme_adi.equalsIgnoreCase(control[control.length - 1])) {
                    isletme_adi_1 = isletmeadi_str;
                    break;
                }
                
            }
        } catch (IOException ex) {
            Logger.getLogger(FisArayuz.class.getName()).log(Level.SEVERE, null, ex);
        }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FisArayuz.class.getName()).log(Level.SEVERE, null, ex);
        }
        

        

        String[] tarih_result = fulltext.split("TARİH : ");
        String tarih_before = tarih_result[tarih_result.length - 1];
        String[] tarih_result_1 = tarih_before.split("\\n");
        String tarih = tarih_result_1[0];
        /*String PATH_tarih="C:\\Users\\K4RK1N\\Pictures\\fis\\texts\\tarih.txt";
			FileReader tarih_fr = new FileReader(PATH_tarih);
			BufferedReader tarih_br= new BufferedReader(tarih_fr);
			
			String tarih_str;
			String tarih="";
			
			while ((tarih_str=tarih_br.readLine())!=null) {

                             String[] tarih_result = fulltext.split(tarih_str);
                             System.out.println(tarih_str);
                             if(tarih_str.equals("TARİH : "))
                                 System.out.println("+++");
			     String tarih_before=tarih_result[tarih_result.length-1];
                             System.out.println(tarih_before);
			     String[] tarih_result_1 = tarih_before.split("\\n");
			     tarih=tarih_result_1[0];
			     String[] control_1=fulltext.split("\\n");
                             System.out.println(tarih+control_1[0]);
                             
			     if(!tarih.equalsIgnoreCase(control_1[0])) {
			    	 break;
			     }

			}*/
        String PATH_fisno = "C:\\Users\\K4RK1N\\Pictures\\fis\\texts\\fisno.txt";
        FileReader fisno_fr;
        BufferedReader fisno_br;
        String fisno_str;
        String fisno = "";
        try {
            fisno_fr = new FileReader(PATH_fisno);
            fisno_br = new BufferedReader(fisno_fr);

        

            try {
                while ((fisno_str = fisno_br.readLine()) != null) {
                    
                    String[] fisno_result = fulltext.split(fisno_str);
                    String fisno_before = fisno_result[fisno_result.length - 1];
                    String[] fisno_result_1 = fisno_before.split("\\n");
                    fisno = fisno_result_1[0];
                    String[] control_2 = fulltext.split("\\n");
                    
                    if (!fisno.equalsIgnoreCase(control_2[0])) {
                        break;
                    }
                    
                }   } catch (IOException ex) {
                Logger.getLogger(FisArayuz.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FisArayuz.class.getName()).log(Level.SEVERE, null, ex);
        }
        

        String PATH_urunler = "C:\\Users\\K4RK1N\\Pictures\\fis\\texts\\urunler.txt";
        FileReader urunler_fr;
        BufferedReader urunler_br;
        String urunler_str;
        ArrayList<String> urunler = new ArrayList<String>();
        ArrayList<String> urunler_kdv = new ArrayList<String>();
        try {
            urunler_fr = new FileReader(PATH_urunler);
            urunler_br = new BufferedReader(urunler_fr);
            try {
                while ((urunler_str = urunler_br.readLine()) != null) {
                    
                    String[] urunler_result = fulltext.split(urunler_str);
                    String urunler_before = urunler_result[0];
                    String[] urunler_result_1 = urunler_before.split("\\n");
                    String[] control_3 = fulltext.split("\\n");
                    if (!urunler_result_1[urunler_result_1.length - 1].equalsIgnoreCase(control_3[control_3.length - 1])) {
                        urunler_kdv.add(urunler_str);
                        urunler.add(urunler_result_1[urunler_result_1.length - 1]);
                    }
                    
                }   } catch (IOException ex) {
                Logger.getLogger(FisArayuz.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FisArayuz.class.getName()).log(Level.SEVERE, null, ex);
        }
        

        String PATH_urunler_fiyat = "C:\\Users\\K4RK1N\\Pictures\\fis\\texts\\urunler.txt";
        FileReader urunler_fiyat_fr;
         BufferedReader urunler_fiyat_br;
         String urunler_fiyat_str;
        ArrayList<String> urunler_fiyat = new ArrayList<String>();
        try {
            urunler_fiyat_fr = new FileReader(PATH_urunler_fiyat);
            urunler_fiyat_br = new BufferedReader(urunler_fiyat_fr);


            try {
                while ((urunler_fiyat_str = urunler_fiyat_br.readLine()) != null) {
                    
                    String[] urunler_fiyat_result = fulltext.split(urunler_fiyat_str);
                    String urunler_fiyat_before = urunler_fiyat_result[urunler_fiyat_result.length - 1];
                    String[] urunler_fiyat_result_1 = urunler_fiyat_before.split("\\n");
                    String[] control_4 = fulltext.split("\\n");
                    if (!urunler_fiyat_result_1[0].equalsIgnoreCase(control_4[0])) {
                        urunler_fiyat.add(urunler_fiyat_result_1[0]);
                    }
                }   } catch (IOException ex) {
                Logger.getLogger(FisArayuz.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FisArayuz.class.getName()).log(Level.SEVERE, null, ex);
        }
        

        String PATH_toplam = "C:\\Users\\K4RK1N\\Pictures\\fis\\texts\\toplam.txt";
        FileReader toplam_fr;
        BufferedReader toplam_br;
        String toplam_str;
        String toplam = "";
        try {
            toplam_fr = new FileReader(PATH_toplam);
             toplam_br = new BufferedReader(toplam_fr);


            try {
                while ((toplam_str = toplam_br.readLine()) != null) {
                    
                    String[] toplam_result = fulltext.split(toplam_str);
                    String toplam_before = toplam_result[toplam_result.length - 1];
                    String[] toplam_result_1 = toplam_before.split("\\n");
                    toplam = toplam_result_1[0];
                    String[] control_5 = fulltext.split("\\n");
                    
                    if (!toplam.equalsIgnoreCase(control_5[0])) {
                        break;
                    }
                    
                }   } catch (IOException ex) {
                Logger.getLogger(FisArayuz.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FisArayuz.class.getName()).log(Level.SEVERE, null, ex);
        }
       

        String PATH_toplamkdv = "C:\\Users\\K4RK1N\\Pictures\\fis\\texts\\toplamkdv.txt";
        FileReader toplamkdv_fr;
        BufferedReader toplamkdv_br;
        String toplamkdv_str;
        String toplamkdv = "";
        try {
            toplamkdv_fr = new FileReader(PATH_toplamkdv);
            toplamkdv_br = new BufferedReader(toplamkdv_fr);



            try {
                while ((toplamkdv_str = toplamkdv_br.readLine()) != null) {
                    
                    String[] toplamkdv_result = fulltext.split(toplamkdv_str);
                    String toplamkdv_before = toplamkdv_result[toplamkdv_result.length - 1];
                    String[] toplamkdv_result_1 = toplamkdv_before.split("\\n");
                    toplamkdv = toplamkdv_result_1[0];
                    String[] control_6 = fulltext.split("\\n");
                    
                    if (!toplamkdv.equalsIgnoreCase(control_6[0])) {
                        break;
                    }
                    
                }   } catch (IOException ex) {
                Logger.getLogger(FisArayuz.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FisArayuz.class.getName()).log(Level.SEVERE, null, ex);
        }
        

        String sql_sorgu;
        try {
            Connection myConn = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/fis_other?verifyServerCertificate=false&useSSL=true", "root", "1234");
            Statement myStat = (Statement) myConn.createStatement();
            //int i;
            //i++;

            sql_sorgu = "insert into fis values(" + fisno + ",'" + isletme_adi + "'" + ",'" + tarih + "'" + ",'" + urunler + "'" + ",'" + urunler_fiyat + "'" + ",'" + urunler_kdv + "'," + "'" + toplam + "'," + "'" + toplamkdv + "')";

            int myRs_1 = myStat.executeUpdate(sql_sorgu);

        } catch (Exception e) {
            e.printStackTrace();
        }
        
        
        
        
        
        
        ArrayList<FisOzellik> fisOzellikleri = new ArrayList<FisOzellik>();

        fisOzellikleri = islemler.fisleriGetir();

        if (fisOzellikleri != null) {
            model.setRowCount(0);
            for (FisOzellik fisOzellik : fisOzellikleri) {

                Object[] eklenecek = {fisOzellik.getFis_no(), fisOzellik.getFis_isletme(), fisOzellik.getFis_tarih(), fisOzellik.getFis_urun(), fisOzellik.getFis_urun_fiyat(), fisOzellik.getFis_urun_kdv(), fisOzellik.getFis_toplam_fiyat(), fisOzellik.getFis_toplam_kdv()};

                model.addRow(eklenecek);

            }

        }
       
    }//GEN-LAST:event_fissec_buttonActionPerformed

    public void adres_yolla_before(String adres_1) {
        String adres;
        adres = adres_1;

    }

    public String adres_yolla() {
        String ozadres = "";
        adres_yolla_before(ozadres);
        return ozadres;

    }

    private void guncel_tabloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guncel_tabloActionPerformed
        // TODO add your handling code here:

        ArrayList<FisOzellik> fisOzellikleri = new ArrayList<FisOzellik>();

        fisOzellikleri = islemler.fisleriGetir();

        if (fisOzellikleri != null) {
            model.setRowCount(0);
            for (FisOzellik fisOzellik : fisOzellikleri) {

                Object[] eklenecek = {fisOzellik.getFis_no(), fisOzellik.getFis_isletme(), fisOzellik.getFis_tarih(), fisOzellik.getFis_urun(), fisOzellik.getFis_urun_fiyat(), fisOzellik.getFis_urun_kdv(), fisOzellik.getFis_toplam_fiyat(), fisOzellik.getFis_toplam_kdv()};

                model.addRow(eklenecek);

            }

        }

    }//GEN-LAST:event_guncel_tabloActionPerformed

    public ImageIcon ResizeImage(String ImagePath) {
        ImageIcon MyImage = new ImageIcon(ImagePath);
        Image img = MyImage.getImage();
        Image newImg = img.getScaledInstance(label.getWidth(), label.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(newImg);
        return image;
    }

    /**
     * @param args the command line arguments
     */
    public void fisGoruntule() {

        ArrayList<FisOzellik> fisOzellikleri = new ArrayList<FisOzellik>();

        fisOzellikleri = islemler.fisleriGetir();

        if (fisOzellikleri != null) {
            for (FisOzellik fisOzellik : fisOzellikleri) {

                Object[] eklenecek = {fisOzellik.getFis_no(), fisOzellik.getFis_isletme(), fisOzellik.getFis_tarih(), fisOzellik.getFis_urun(), fisOzellik.getFis_urun_fiyat(), fisOzellik.getFis_urun_kdv(), fisOzellik.getFis_toplam_fiyat(), fisOzellik.getFis_toplam_kdv()};

                model.addRow(eklenecek);

            }

        }

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FisArayuz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FisArayuz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FisArayuz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FisArayuz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
 /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FisArayuz().setVisible(true);
            }
        });*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea fis_parse;
    private javax.swing.JTable fis_tablosu;
    private javax.swing.JButton fissec_button;
    private javax.swing.JButton guncel_tablo;
    private javax.swing.JTextField isletmeadi_arama;
    private javax.swing.JButton isletmeadi_buton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField tarih_arama;
    private javax.swing.JButton tarih_buton;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the sorgu_ek
     */
    public String getSorgu_ek() {
        return sorgu_ek;
    }

    /**
     * @return the path
     */
    public String getPath() {
        return path;
    }

    /**
     * @return the path
     */
}
